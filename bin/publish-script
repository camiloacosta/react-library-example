#!/usr/bin/env node

const { spawn, execSync } = require('child_process')

const CONFIG = {
  gitUsername: process.env.GH_USER,
  gitEmail: process.env.GH_EMAIL
}

const spawnAsync = (...args) => {
  return new Promise((resolve, reject) => {
    const child = spawn.apply(null, args)
    const command = child.spawnargs.join(' ')

    child.stdout.pipe(process.stdout)
    child.stderr.pipe(process.stderr)

    child.on('error', (error) => {
      reject(error)
    })

    child.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`Failed command ${command} with code ${code}`))
      }
      resolve(code)
    })
  })
}

const normalizeBranchName = (branch) => {
  return branch.trim().replace(/\//g, '-')
}

const parseRemoteUrl = (remote, token) => {
  try {
    const { protocol, host, pathname } = new URL(remote)
    return `${protocol}//${token}@${host}${pathname}`
  } catch {
    const [host, pathname] = remote
      .substring(4, remote.indexOf('.git'))
      .split(':')
    return `https://${token}@${host}/${pathname}`
  }
}

const run = async () => {
  const remote = execSync('git config --get remote.origin.url').toString()
  const branch = execSync('git rev-parse --abbrev-ref HEAD').toString()
  const token = process.env.GH_TOKEN
  const remoteWithToken = parseRemoteUrl(remote, token)
  const normalizedBranch = normalizeBranchName(branch)
  const buildOutput = `docs/${normalizedBranch}`
  try {
    await spawnAsync('npm', ['run', 'build-storybook', '--', '-o', buildOutput])
    await spawnAsync('rm', ['-rf', `../${normalizedBranch}`])
    await spawnAsync('mv', [buildOutput, '../'])
    await spawnAsync('git', ['config', 'user.name', CONFIG.gitUsername])
    await spawnAsync('git', ['config', 'user.email', CONFIG.gitEmail])
    await spawnAsync('git', ['fetch', 'origin', 'gh-pages'])
    await spawnAsync('git', ['checkout', 'gh-pages'])
    await spawnAsync('rm', ['-rf', `./${normalizedBranch}`])
    await spawnAsync('mv', [`../${normalizedBranch}`, './'])
    await spawnAsync('git', ['add', normalizedBranch])
    await spawnAsync('git', ['commit', '--amend', '--reuse-message=HEAD'])
    await spawnAsync('git', ['push', remoteWithToken, 'gh-pages', '--force'])
    await spawnAsync('git', ['checkout', '-'])
    process.exit(0)
  } catch (error) {
    console.log('Something went wrong', error)
    process.exit(1)
  }
}

run()
